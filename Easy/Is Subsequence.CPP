#include <string>
#include <unordered_map>
#include <vector>
using namespace std;

class Solution {
    public:
        bool isSubsequence(string s, string t) {
            unordered_map<char, vector<int>> map;
            int pre_pos = -1;
            for (int i = 0; i < t.length(); i++) {
                map[t[i]].push_back(i);
            }

            for (int i = 0; i < s.length(); i++) {
                if (map.find(s[i]) == map.end())
                    return false;
                else {
                    vector hash_vec = map[s[i]];
                    int temp = pre_pos;
                    for (int j = 0; j < hash_vec.size(); j++) {
                        if (pre_pos < hash_vec[j]) {
                            pre_pos = hash_vec[j];
                            break;
                        }
                    }
                    if (pre_pos == temp) return false;
                }
            }
            return true;
        }
};

/*
Given two strings s and t, return true if s is a subsequence of t, or false
otherwise.

A subsequence of a string is a new string that is formed from the original
string by deleting some (can be none) of the characters without disturbing the
relative positions of the remaining characters. (i.e., "ace" is a subsequence of
"abcde" while "aec" is not).



Example 1:
Input: s = "abc", t = "ahbgdc"
Output: true

Example 2:
Input: s = "axc", t = "ahbgdc"
Output: false


Constraints:

0 <= s.length <= 100
0 <= t.length <= 104
s and t consist only of lowercase English letters.


Follow up: Suppose there are lots of incoming s, say s1, s2, ..., sk where k >=
109, and you want to check one by one to see if t has its subsequence. In this
scenario, how would you change your code?
*/